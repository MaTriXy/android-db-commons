plugins {
  id 'com.android.library'
  id 'com.github.ben-manes.versions'
  id 'maven-publish'
  id 'signing'
}

android {
  compileSdkVersion 30
  buildToolsVersion "22.0.1"

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 30
    versionName project.VERSION_NAME
    versionCode Integer.parseInt(project.VERSION_CODE)
    consumerProguardFiles 'consumer-proguard-rules.pro'
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
}

dependencies {
  api 'com.google.guava:guava:18.0'
  api 'androidx.annotation:annotation:1.0.0'

  testImplementation('junit:junit:4.12') {
    exclude module: 'hamcrest-core'
  }
  testImplementation 'org.robolectric:robolectric:2.4'
  testImplementation 'com.google.truth:truth:0.27'
  testImplementation 'com.squareup:fest-android:1.0.7'
  testImplementation 'org.mockito:mockito-all:1.10.19'

  api 'androidx.legacy:legacy-support-v4:1.0.0'

  androidTestImplementation 'com.android.support.test:runner:0.5'
  androidTestImplementation 'com.android.support.test:rules:0.5'
  androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  androidTestImplementation 'com.google.truth:truth:0.27'
  androidTestImplementation 'com.google.guava:guava:18.0'
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError = false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

project.afterEvaluate {
  project.tasks.findByName("test").getTaskDependencies().getDependencies().each { task ->
    task.jvmArgs('-noverify')
  }
}

def libraryGroupId = 'com.getbase.android.db'
def libraryArtifactId = 'library'

apply from: '../developers.gradle'

def pomConfig = {
  licenses {
    license {
      name 'The Apache Software License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
  }
  developers project_developers
  scm {
    connection 'https://github.com/zendesk/android-db-commons.git'
    developerConnection 'https://github.com/zendesk/android-db-commons.git'
    url 'https://github.com/zendesk/android-db-commons'
  }
}

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')

afterEvaluate {
  publishing {
    publications {
      // Creates a Maven publication called "release".
      release(MavenPublication) {
        from components.release
        artifact androidSourcesJar
        artifact androidJavadocsJar
        groupId = libraryGroupId
        artifactId = libraryArtifactId
        version = project.VERSION_NAME

        pom.withXml {
          def root = asNode()
          root.appendNode('description', POM_DESCRIPTION)
          root.appendNode('name', 'android-db-commons')
          root.appendNode('url', POM_URL)
          root.children().last() + pomConfig
        }
      }
    }

    repositories {
      maven {
        String releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        String snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        url = project.VERSION_NAME.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl

        credentials {
          username ossrhUsername
          password ossrhPassword
        }
      }
    }
  }
}

signing {
  required { !project.VERSION_NAME.endsWith('SNAPSHOT') }
  sign publishing.publications
}

publish {
  doLast {
    println "The published version: ${project.VERSION_NAME}"
  }
}
